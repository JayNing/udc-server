/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.common.body;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-06-01")
public class ExamAnswer implements org.apache.thrift.TBase<ExamAnswer, ExamAnswer._Fields>, java.io.Serializable, Cloneable, Comparable<ExamAnswer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExamAnswer");

  private static final org.apache.thrift.protocol.TField ANSWER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("answerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("exerType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EXERCISE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exerciseId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ANSWER_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("answerUserId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ANS_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("ansContent", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("score", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ANS_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ansCreateTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField IS_CORRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("isCorrect", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ExamAnswerStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ExamAnswerTupleSchemeFactory();

  public int answerId; // required
  public int examId; // required
  public int exerType; // required
  public int exerciseId; // required
  public int answerUserId; // required
  public java.lang.String ansContent; // required
  public int score; // required
  public long ansCreateTime; // required
  public int isCorrect; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ANSWER_ID((short)1, "answerId"),
    EXAM_ID((short)2, "examId"),
    EXER_TYPE((short)3, "exerType"),
    EXERCISE_ID((short)4, "exerciseId"),
    ANSWER_USER_ID((short)5, "answerUserId"),
    ANS_CONTENT((short)6, "ansContent"),
    SCORE((short)7, "score"),
    ANS_CREATE_TIME((short)8, "ansCreateTime"),
    IS_CORRECT((short)9, "isCorrect");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ANSWER_ID
          return ANSWER_ID;
        case 2: // EXAM_ID
          return EXAM_ID;
        case 3: // EXER_TYPE
          return EXER_TYPE;
        case 4: // EXERCISE_ID
          return EXERCISE_ID;
        case 5: // ANSWER_USER_ID
          return ANSWER_USER_ID;
        case 6: // ANS_CONTENT
          return ANS_CONTENT;
        case 7: // SCORE
          return SCORE;
        case 8: // ANS_CREATE_TIME
          return ANS_CREATE_TIME;
        case 9: // IS_CORRECT
          return IS_CORRECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ANSWERID_ISSET_ID = 0;
  private static final int __EXAMID_ISSET_ID = 1;
  private static final int __EXERTYPE_ISSET_ID = 2;
  private static final int __EXERCISEID_ISSET_ID = 3;
  private static final int __ANSWERUSERID_ISSET_ID = 4;
  private static final int __SCORE_ISSET_ID = 5;
  private static final int __ANSCREATETIME_ISSET_ID = 6;
  private static final int __ISCORRECT_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ANSWER_ID, new org.apache.thrift.meta_data.FieldMetaData("answerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("examId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("exerType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXERCISE_ID, new org.apache.thrift.meta_data.FieldMetaData("exerciseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANSWER_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("answerUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANS_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("ansContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCORE, new org.apache.thrift.meta_data.FieldMetaData("score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ANS_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("ansCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_CORRECT, new org.apache.thrift.meta_data.FieldMetaData("isCorrect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExamAnswer.class, metaDataMap);
  }

  public ExamAnswer() {
  }

  public ExamAnswer(
    int answerId,
    int examId,
    int exerType,
    int exerciseId,
    int answerUserId,
    java.lang.String ansContent,
    int score,
    long ansCreateTime,
    int isCorrect)
  {
    this();
    this.answerId = answerId;
    setAnswerIdIsSet(true);
    this.examId = examId;
    setExamIdIsSet(true);
    this.exerType = exerType;
    setExerTypeIsSet(true);
    this.exerciseId = exerciseId;
    setExerciseIdIsSet(true);
    this.answerUserId = answerUserId;
    setAnswerUserIdIsSet(true);
    this.ansContent = ansContent;
    this.score = score;
    setScoreIsSet(true);
    this.ansCreateTime = ansCreateTime;
    setAnsCreateTimeIsSet(true);
    this.isCorrect = isCorrect;
    setIsCorrectIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExamAnswer(ExamAnswer other) {
    __isset_bitfield = other.__isset_bitfield;
    this.answerId = other.answerId;
    this.examId = other.examId;
    this.exerType = other.exerType;
    this.exerciseId = other.exerciseId;
    this.answerUserId = other.answerUserId;
    if (other.isSetAnsContent()) {
      this.ansContent = other.ansContent;
    }
    this.score = other.score;
    this.ansCreateTime = other.ansCreateTime;
    this.isCorrect = other.isCorrect;
  }

  public ExamAnswer deepCopy() {
    return new ExamAnswer(this);
  }

  @Override
  public void clear() {
    setAnswerIdIsSet(false);
    this.answerId = 0;
    setExamIdIsSet(false);
    this.examId = 0;
    setExerTypeIsSet(false);
    this.exerType = 0;
    setExerciseIdIsSet(false);
    this.exerciseId = 0;
    setAnswerUserIdIsSet(false);
    this.answerUserId = 0;
    this.ansContent = null;
    setScoreIsSet(false);
    this.score = 0;
    setAnsCreateTimeIsSet(false);
    this.ansCreateTime = 0;
    setIsCorrectIsSet(false);
    this.isCorrect = 0;
  }

  public int getAnswerId() {
    return this.answerId;
  }

  public ExamAnswer setAnswerId(int answerId) {
    this.answerId = answerId;
    setAnswerIdIsSet(true);
    return this;
  }

  public void unsetAnswerId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSWERID_ISSET_ID);
  }

  /** Returns true if field answerId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSWERID_ISSET_ID);
  }

  public void setAnswerIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSWERID_ISSET_ID, value);
  }

  public int getExamId() {
    return this.examId;
  }

  public ExamAnswer setExamId(int examId) {
    this.examId = examId;
    setExamIdIsSet(true);
    return this;
  }

  public void unsetExamId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXAMID_ISSET_ID);
  }

  /** Returns true if field examId is set (has been assigned a value) and false otherwise */
  public boolean isSetExamId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXAMID_ISSET_ID);
  }

  public void setExamIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXAMID_ISSET_ID, value);
  }

  public int getExerType() {
    return this.exerType;
  }

  public ExamAnswer setExerType(int exerType) {
    this.exerType = exerType;
    setExerTypeIsSet(true);
    return this;
  }

  public void unsetExerType() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXERTYPE_ISSET_ID);
  }

  /** Returns true if field exerType is set (has been assigned a value) and false otherwise */
  public boolean isSetExerType() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXERTYPE_ISSET_ID);
  }

  public void setExerTypeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXERTYPE_ISSET_ID, value);
  }

  public int getExerciseId() {
    return this.exerciseId;
  }

  public ExamAnswer setExerciseId(int exerciseId) {
    this.exerciseId = exerciseId;
    setExerciseIdIsSet(true);
    return this;
  }

  public void unsetExerciseId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXERCISEID_ISSET_ID);
  }

  /** Returns true if field exerciseId is set (has been assigned a value) and false otherwise */
  public boolean isSetExerciseId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXERCISEID_ISSET_ID);
  }

  public void setExerciseIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXERCISEID_ISSET_ID, value);
  }

  public int getAnswerUserId() {
    return this.answerUserId;
  }

  public ExamAnswer setAnswerUserId(int answerUserId) {
    this.answerUserId = answerUserId;
    setAnswerUserIdIsSet(true);
    return this;
  }

  public void unsetAnswerUserId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSWERUSERID_ISSET_ID);
  }

  /** Returns true if field answerUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswerUserId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSWERUSERID_ISSET_ID);
  }

  public void setAnswerUserIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSWERUSERID_ISSET_ID, value);
  }

  public java.lang.String getAnsContent() {
    return this.ansContent;
  }

  public ExamAnswer setAnsContent(java.lang.String ansContent) {
    this.ansContent = ansContent;
    return this;
  }

  public void unsetAnsContent() {
    this.ansContent = null;
  }

  /** Returns true if field ansContent is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsContent() {
    return this.ansContent != null;
  }

  public void setAnsContentIsSet(boolean value) {
    if (!value) {
      this.ansContent = null;
    }
  }

  public int getScore() {
    return this.score;
  }

  public ExamAnswer setScore(int score) {
    this.score = score;
    setScoreIsSet(true);
    return this;
  }

  public void unsetScore() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  /** Returns true if field score is set (has been assigned a value) and false otherwise */
  public boolean isSetScore() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SCORE_ISSET_ID);
  }

  public void setScoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SCORE_ISSET_ID, value);
  }

  public long getAnsCreateTime() {
    return this.ansCreateTime;
  }

  public ExamAnswer setAnsCreateTime(long ansCreateTime) {
    this.ansCreateTime = ansCreateTime;
    setAnsCreateTimeIsSet(true);
    return this;
  }

  public void unsetAnsCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ANSCREATETIME_ISSET_ID);
  }

  /** Returns true if field ansCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAnsCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ANSCREATETIME_ISSET_ID);
  }

  public void setAnsCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ANSCREATETIME_ISSET_ID, value);
  }

  public int getIsCorrect() {
    return this.isCorrect;
  }

  public ExamAnswer setIsCorrect(int isCorrect) {
    this.isCorrect = isCorrect;
    setIsCorrectIsSet(true);
    return this;
  }

  public void unsetIsCorrect() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISCORRECT_ISSET_ID);
  }

  /** Returns true if field isCorrect is set (has been assigned a value) and false otherwise */
  public boolean isSetIsCorrect() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISCORRECT_ISSET_ID);
  }

  public void setIsCorrectIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISCORRECT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ANSWER_ID:
      if (value == null) {
        unsetAnswerId();
      } else {
        setAnswerId((java.lang.Integer)value);
      }
      break;

    case EXAM_ID:
      if (value == null) {
        unsetExamId();
      } else {
        setExamId((java.lang.Integer)value);
      }
      break;

    case EXER_TYPE:
      if (value == null) {
        unsetExerType();
      } else {
        setExerType((java.lang.Integer)value);
      }
      break;

    case EXERCISE_ID:
      if (value == null) {
        unsetExerciseId();
      } else {
        setExerciseId((java.lang.Integer)value);
      }
      break;

    case ANSWER_USER_ID:
      if (value == null) {
        unsetAnswerUserId();
      } else {
        setAnswerUserId((java.lang.Integer)value);
      }
      break;

    case ANS_CONTENT:
      if (value == null) {
        unsetAnsContent();
      } else {
        setAnsContent((java.lang.String)value);
      }
      break;

    case SCORE:
      if (value == null) {
        unsetScore();
      } else {
        setScore((java.lang.Integer)value);
      }
      break;

    case ANS_CREATE_TIME:
      if (value == null) {
        unsetAnsCreateTime();
      } else {
        setAnsCreateTime((java.lang.Long)value);
      }
      break;

    case IS_CORRECT:
      if (value == null) {
        unsetIsCorrect();
      } else {
        setIsCorrect((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ANSWER_ID:
      return getAnswerId();

    case EXAM_ID:
      return getExamId();

    case EXER_TYPE:
      return getExerType();

    case EXERCISE_ID:
      return getExerciseId();

    case ANSWER_USER_ID:
      return getAnswerUserId();

    case ANS_CONTENT:
      return getAnsContent();

    case SCORE:
      return getScore();

    case ANS_CREATE_TIME:
      return getAnsCreateTime();

    case IS_CORRECT:
      return getIsCorrect();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ANSWER_ID:
      return isSetAnswerId();
    case EXAM_ID:
      return isSetExamId();
    case EXER_TYPE:
      return isSetExerType();
    case EXERCISE_ID:
      return isSetExerciseId();
    case ANSWER_USER_ID:
      return isSetAnswerUserId();
    case ANS_CONTENT:
      return isSetAnsContent();
    case SCORE:
      return isSetScore();
    case ANS_CREATE_TIME:
      return isSetAnsCreateTime();
    case IS_CORRECT:
      return isSetIsCorrect();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ExamAnswer)
      return this.equals((ExamAnswer)that);
    return false;
  }

  public boolean equals(ExamAnswer that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_answerId = true;
    boolean that_present_answerId = true;
    if (this_present_answerId || that_present_answerId) {
      if (!(this_present_answerId && that_present_answerId))
        return false;
      if (this.answerId != that.answerId)
        return false;
    }

    boolean this_present_examId = true;
    boolean that_present_examId = true;
    if (this_present_examId || that_present_examId) {
      if (!(this_present_examId && that_present_examId))
        return false;
      if (this.examId != that.examId)
        return false;
    }

    boolean this_present_exerType = true;
    boolean that_present_exerType = true;
    if (this_present_exerType || that_present_exerType) {
      if (!(this_present_exerType && that_present_exerType))
        return false;
      if (this.exerType != that.exerType)
        return false;
    }

    boolean this_present_exerciseId = true;
    boolean that_present_exerciseId = true;
    if (this_present_exerciseId || that_present_exerciseId) {
      if (!(this_present_exerciseId && that_present_exerciseId))
        return false;
      if (this.exerciseId != that.exerciseId)
        return false;
    }

    boolean this_present_answerUserId = true;
    boolean that_present_answerUserId = true;
    if (this_present_answerUserId || that_present_answerUserId) {
      if (!(this_present_answerUserId && that_present_answerUserId))
        return false;
      if (this.answerUserId != that.answerUserId)
        return false;
    }

    boolean this_present_ansContent = true && this.isSetAnsContent();
    boolean that_present_ansContent = true && that.isSetAnsContent();
    if (this_present_ansContent || that_present_ansContent) {
      if (!(this_present_ansContent && that_present_ansContent))
        return false;
      if (!this.ansContent.equals(that.ansContent))
        return false;
    }

    boolean this_present_score = true;
    boolean that_present_score = true;
    if (this_present_score || that_present_score) {
      if (!(this_present_score && that_present_score))
        return false;
      if (this.score != that.score)
        return false;
    }

    boolean this_present_ansCreateTime = true;
    boolean that_present_ansCreateTime = true;
    if (this_present_ansCreateTime || that_present_ansCreateTime) {
      if (!(this_present_ansCreateTime && that_present_ansCreateTime))
        return false;
      if (this.ansCreateTime != that.ansCreateTime)
        return false;
    }

    boolean this_present_isCorrect = true;
    boolean that_present_isCorrect = true;
    if (this_present_isCorrect || that_present_isCorrect) {
      if (!(this_present_isCorrect && that_present_isCorrect))
        return false;
      if (this.isCorrect != that.isCorrect)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + answerId;

    hashCode = hashCode * 8191 + examId;

    hashCode = hashCode * 8191 + exerType;

    hashCode = hashCode * 8191 + exerciseId;

    hashCode = hashCode * 8191 + answerUserId;

    hashCode = hashCode * 8191 + ((isSetAnsContent()) ? 131071 : 524287);
    if (isSetAnsContent())
      hashCode = hashCode * 8191 + ansContent.hashCode();

    hashCode = hashCode * 8191 + score;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ansCreateTime);

    hashCode = hashCode * 8191 + isCorrect;

    return hashCode;
  }

  @Override
  public int compareTo(ExamAnswer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAnswerId()).compareTo(other.isSetAnswerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerId, other.answerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamId()).compareTo(other.isSetExamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examId, other.examId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExerType()).compareTo(other.isSetExerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerType, other.exerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExerciseId()).compareTo(other.isSetExerciseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExerciseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exerciseId, other.exerciseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnswerUserId()).compareTo(other.isSetAnswerUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswerUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answerUserId, other.answerUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnsContent()).compareTo(other.isSetAnsContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansContent, other.ansContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetScore()).compareTo(other.isSetScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.score, other.score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnsCreateTime()).compareTo(other.isSetAnsCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnsCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ansCreateTime, other.ansCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsCorrect()).compareTo(other.isSetIsCorrect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsCorrect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isCorrect, other.isCorrect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ExamAnswer(");
    boolean first = true;

    sb.append("answerId:");
    sb.append(this.answerId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("examId:");
    sb.append(this.examId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exerType:");
    sb.append(this.exerType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("exerciseId:");
    sb.append(this.exerciseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("answerUserId:");
    sb.append(this.answerUserId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ansContent:");
    if (this.ansContent == null) {
      sb.append("null");
    } else {
      sb.append(this.ansContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("score:");
    sb.append(this.score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ansCreateTime:");
    sb.append(this.ansCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isCorrect:");
    sb.append(this.isCorrect);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExamAnswerStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExamAnswerStandardScheme getScheme() {
      return new ExamAnswerStandardScheme();
    }
  }

  private static class ExamAnswerStandardScheme extends org.apache.thrift.scheme.StandardScheme<ExamAnswer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExamAnswer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ANSWER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answerId = iprot.readI32();
              struct.setAnswerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.examId = iprot.readI32();
              struct.setExamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exerType = iprot.readI32();
              struct.setExerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXERCISE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.exerciseId = iprot.readI32();
              struct.setExerciseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ANSWER_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.answerUserId = iprot.readI32();
              struct.setAnswerUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ANS_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ansContent = iprot.readString();
              struct.setAnsContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.score = iprot.readI32();
              struct.setScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ANS_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ansCreateTime = iprot.readI64();
              struct.setAnsCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // IS_CORRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.isCorrect = iprot.readI32();
              struct.setIsCorrectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExamAnswer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ANSWER_ID_FIELD_DESC);
      oprot.writeI32(struct.answerId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXAM_ID_FIELD_DESC);
      oprot.writeI32(struct.examId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXER_TYPE_FIELD_DESC);
      oprot.writeI32(struct.exerType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXERCISE_ID_FIELD_DESC);
      oprot.writeI32(struct.exerciseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANSWER_USER_ID_FIELD_DESC);
      oprot.writeI32(struct.answerUserId);
      oprot.writeFieldEnd();
      if (struct.ansContent != null) {
        oprot.writeFieldBegin(ANS_CONTENT_FIELD_DESC);
        oprot.writeString(struct.ansContent);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SCORE_FIELD_DESC);
      oprot.writeI32(struct.score);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ANS_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.ansCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_CORRECT_FIELD_DESC);
      oprot.writeI32(struct.isCorrect);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExamAnswerTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ExamAnswerTupleScheme getScheme() {
      return new ExamAnswerTupleScheme();
    }
  }

  private static class ExamAnswerTupleScheme extends org.apache.thrift.scheme.TupleScheme<ExamAnswer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExamAnswer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAnswerId()) {
        optionals.set(0);
      }
      if (struct.isSetExamId()) {
        optionals.set(1);
      }
      if (struct.isSetExerType()) {
        optionals.set(2);
      }
      if (struct.isSetExerciseId()) {
        optionals.set(3);
      }
      if (struct.isSetAnswerUserId()) {
        optionals.set(4);
      }
      if (struct.isSetAnsContent()) {
        optionals.set(5);
      }
      if (struct.isSetScore()) {
        optionals.set(6);
      }
      if (struct.isSetAnsCreateTime()) {
        optionals.set(7);
      }
      if (struct.isSetIsCorrect()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetAnswerId()) {
        oprot.writeI32(struct.answerId);
      }
      if (struct.isSetExamId()) {
        oprot.writeI32(struct.examId);
      }
      if (struct.isSetExerType()) {
        oprot.writeI32(struct.exerType);
      }
      if (struct.isSetExerciseId()) {
        oprot.writeI32(struct.exerciseId);
      }
      if (struct.isSetAnswerUserId()) {
        oprot.writeI32(struct.answerUserId);
      }
      if (struct.isSetAnsContent()) {
        oprot.writeString(struct.ansContent);
      }
      if (struct.isSetScore()) {
        oprot.writeI32(struct.score);
      }
      if (struct.isSetAnsCreateTime()) {
        oprot.writeI64(struct.ansCreateTime);
      }
      if (struct.isSetIsCorrect()) {
        oprot.writeI32(struct.isCorrect);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExamAnswer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.answerId = iprot.readI32();
        struct.setAnswerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.examId = iprot.readI32();
        struct.setExamIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exerType = iprot.readI32();
        struct.setExerTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exerciseId = iprot.readI32();
        struct.setExerciseIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.answerUserId = iprot.readI32();
        struct.setAnswerUserIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.ansContent = iprot.readString();
        struct.setAnsContentIsSet(true);
      }
      if (incoming.get(6)) {
        struct.score = iprot.readI32();
        struct.setScoreIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ansCreateTime = iprot.readI64();
        struct.setAnsCreateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.isCorrect = iprot.readI32();
        struct.setIsCorrectIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

